/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Calendar Service API
 * API for managing chat, orders and payments.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  AuthResponse,
  PostApiAuthResendConfirmationBody,
  RegisterResponse,
  UserLogin,
  UserRegister
} from '../../types/api';





/**
 * @summary Register a new user.
 */
export const postApiAuthRegister = (
    userRegister: UserRegister, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RegisterResponse>> => {
    
    
    return axios.post(
      `https://dev-api.planandpan.com/api/auth/register`,
      userRegister,options
    );
  }



export const getPostApiAuthRegisterMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRegister>>, TError,{data: UserRegister}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRegister>>, TError,{data: UserRegister}, TContext> => {

const mutationKey = ['postApiAuthRegister'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthRegister>>, {data: UserRegister}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthRegister(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthRegister>>>
    export type PostApiAuthRegisterMutationBody = UserRegister
    export type PostApiAuthRegisterMutationError = AxiosError<void>

    /**
 * @summary Register a new user.
 */
export const usePostApiAuthRegister = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRegister>>, TError,{data: UserRegister}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthRegister>>,
        TError,
        {data: UserRegister},
        TContext
      > => {

      const mutationOptions = getPostApiAuthRegisterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Login a user.
 */
export const postApiAuthLogin = (
    userLogin: UserLogin, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthResponse>> => {
    
    
    return axios.post(
      `https://dev-api.planandpan.com/api/auth/login`,
      userLogin,options
    );
  }



export const getPostApiAuthLoginMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: UserLogin}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: UserLogin}, TContext> => {

const mutationKey = ['postApiAuthLogin'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogin>>, {data: UserLogin}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLogin(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogin>>>
    export type PostApiAuthLoginMutationBody = UserLogin
    export type PostApiAuthLoginMutationError = AxiosError<void>

    /**
 * @summary Login a user.
 */
export const usePostApiAuthLogin = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: UserLogin}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLogin>>,
        TError,
        {data: UserLogin},
        TContext
      > => {

      const mutationOptions = getPostApiAuthLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Resend confirmation email
 */
export const postApiAuthResendConfirmation = (
    postApiAuthResendConfirmationBody: PostApiAuthResendConfirmationBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `https://dev-api.planandpan.com/api/auth/resend-confirmation`,
      postApiAuthResendConfirmationBody,options
    );
  }



export const getPostApiAuthResendConfirmationMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthResendConfirmation>>, TError,{data: PostApiAuthResendConfirmationBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthResendConfirmation>>, TError,{data: PostApiAuthResendConfirmationBody}, TContext> => {

const mutationKey = ['postApiAuthResendConfirmation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthResendConfirmation>>, {data: PostApiAuthResendConfirmationBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthResendConfirmation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthResendConfirmationMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthResendConfirmation>>>
    export type PostApiAuthResendConfirmationMutationBody = PostApiAuthResendConfirmationBody
    export type PostApiAuthResendConfirmationMutationError = AxiosError<void>

    /**
 * @summary Resend confirmation email
 */
export const usePostApiAuthResendConfirmation = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthResendConfirmation>>, TError,{data: PostApiAuthResendConfirmationBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthResendConfirmation>>,
        TError,
        {data: PostApiAuthResendConfirmationBody},
        TContext
      > => {

      const mutationOptions = getPostApiAuthResendConfirmationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Confirm the user's email.
 */
export const getApiAuthConfirmToken = (
    token: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `https://dev-api.planandpan.com/api/auth/confirm/${token}`,options
    );
  }


export const getGetApiAuthConfirmTokenQueryKey = (token: string,) => {
    return [`https://dev-api.planandpan.com/api/auth/confirm/${token}`] as const;
    }

    
export const getGetApiAuthConfirmTokenQueryOptions = <TData = Awaited<ReturnType<typeof getApiAuthConfirmToken>>, TError = AxiosError<void>>(token: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthConfirmToken>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthConfirmTokenQueryKey(token);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthConfirmToken>>> = ({ signal }) => getApiAuthConfirmToken(token, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(token), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAuthConfirmToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAuthConfirmTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthConfirmToken>>>
export type GetApiAuthConfirmTokenQueryError = AxiosError<void>


export function useGetApiAuthConfirmToken<TData = Awaited<ReturnType<typeof getApiAuthConfirmToken>>, TError = AxiosError<void>>(
 token: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthConfirmToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthConfirmToken>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthConfirmToken>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthConfirmToken<TData = Awaited<ReturnType<typeof getApiAuthConfirmToken>>, TError = AxiosError<void>>(
 token: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthConfirmToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthConfirmToken>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthConfirmToken>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthConfirmToken<TData = Awaited<ReturnType<typeof getApiAuthConfirmToken>>, TError = AxiosError<void>>(
 token: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthConfirmToken>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Confirm the user's email.
 */

export function useGetApiAuthConfirmToken<TData = Awaited<ReturnType<typeof getApiAuthConfirmToken>>, TError = AxiosError<void>>(
 token: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthConfirmToken>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiAuthConfirmTokenQueryOptions(token,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get the authenticated user's profile.
 */
export const getApiAuthProfile = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `https://dev-api.planandpan.com/api/auth/profile`,options
    );
  }


export const getGetApiAuthProfileQueryKey = () => {
    return [`https://dev-api.planandpan.com/api/auth/profile`] as const;
    }

    
export const getGetApiAuthProfileQueryOptions = <TData = Awaited<ReturnType<typeof getApiAuthProfile>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthProfile>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthProfile>>> = ({ signal }) => getApiAuthProfile({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAuthProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAuthProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthProfile>>>
export type GetApiAuthProfileQueryError = AxiosError<void>


export function useGetApiAuthProfile<TData = Awaited<ReturnType<typeof getApiAuthProfile>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthProfile>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthProfile>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthProfile<TData = Awaited<ReturnType<typeof getApiAuthProfile>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthProfile>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthProfile>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthProfile<TData = Awaited<ReturnType<typeof getApiAuthProfile>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthProfile>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the authenticated user's profile.
 */

export function useGetApiAuthProfile<TData = Awaited<ReturnType<typeof getApiAuthProfile>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthProfile>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiAuthProfileQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get the authenticated user's profile.
 */
export const postApiAuthLogout = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `https://dev-api.planandpan.com/api/auth/logout`,undefined,options
    );
  }



export const getPostApiAuthLogoutMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogout>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogout>>, TError,void, TContext> => {

const mutationKey = ['postApiAuthLogout'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogout>>, void> = () => {
          

          return  postApiAuthLogout(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogout>>>
    
    export type PostApiAuthLogoutMutationError = AxiosError<void>

    /**
 * @summary Get the authenticated user's profile.
 */
export const usePostApiAuthLogout = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogout>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLogout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostApiAuthLogoutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    