/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Calendar Service API
 * API for managing chat, orders and payments.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ChangePasswordRequest,
  ChangePasswordResponse,
  PasswordReset,
  PasswordResetRequest,
  PostApiPasswordChange400,
  PostApiPasswordChange404,
  PostApiPasswordChange500
} from '../../types/api';





/**
 * @summary Request a password reset
 */
export const postApiPasswordForgot = (
    passwordResetRequest: PasswordResetRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `https://dev-api.planandpan.com/api/password/forgot`,
      passwordResetRequest,options
    );
  }



export const getPostApiPasswordForgotMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordForgot>>, TError,{data: PasswordResetRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordForgot>>, TError,{data: PasswordResetRequest}, TContext> => {

const mutationKey = ['postApiPasswordForgot'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPasswordForgot>>, {data: PasswordResetRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiPasswordForgot(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPasswordForgotMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPasswordForgot>>>
    export type PostApiPasswordForgotMutationBody = PasswordResetRequest
    export type PostApiPasswordForgotMutationError = AxiosError<void>

    /**
 * @summary Request a password reset
 */
export const usePostApiPasswordForgot = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordForgot>>, TError,{data: PasswordResetRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPasswordForgot>>,
        TError,
        {data: PasswordResetRequest},
        TContext
      > => {

      const mutationOptions = getPostApiPasswordForgotMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Reset the user's password
 */
export const postApiPasswordReset = (
    passwordReset: PasswordReset, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `https://dev-api.planandpan.com/api/password/reset`,
      passwordReset,options
    );
  }



export const getPostApiPasswordResetMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordReset>>, TError,{data: PasswordReset}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordReset>>, TError,{data: PasswordReset}, TContext> => {

const mutationKey = ['postApiPasswordReset'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPasswordReset>>, {data: PasswordReset}> = (props) => {
          const {data} = props ?? {};

          return  postApiPasswordReset(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPasswordResetMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPasswordReset>>>
    export type PostApiPasswordResetMutationBody = PasswordReset
    export type PostApiPasswordResetMutationError = AxiosError<void>

    /**
 * @summary Reset the user's password
 */
export const usePostApiPasswordReset = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordReset>>, TError,{data: PasswordReset}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPasswordReset>>,
        TError,
        {data: PasswordReset},
        TContext
      > => {

      const mutationOptions = getPostApiPasswordResetMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Change a user's password.
 */
export const postApiPasswordChange = (
    changePasswordRequest: ChangePasswordRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChangePasswordResponse>> => {
    
    
    return axios.post(
      `https://dev-api.planandpan.com/api/password/change`,
      changePasswordRequest,options
    );
  }



export const getPostApiPasswordChangeMutationOptions = <TError = AxiosError<PostApiPasswordChange400 | PostApiPasswordChange404 | PostApiPasswordChange500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordChange>>, TError,{data: ChangePasswordRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordChange>>, TError,{data: ChangePasswordRequest}, TContext> => {

const mutationKey = ['postApiPasswordChange'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPasswordChange>>, {data: ChangePasswordRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiPasswordChange(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPasswordChangeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPasswordChange>>>
    export type PostApiPasswordChangeMutationBody = ChangePasswordRequest
    export type PostApiPasswordChangeMutationError = AxiosError<PostApiPasswordChange400 | PostApiPasswordChange404 | PostApiPasswordChange500>

    /**
 * @summary Change a user's password.
 */
export const usePostApiPasswordChange = <TError = AxiosError<PostApiPasswordChange400 | PostApiPasswordChange404 | PostApiPasswordChange500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordChange>>, TError,{data: ChangePasswordRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPasswordChange>>,
        TError,
        {data: ChangePasswordRequest},
        TContext
      > => {

      const mutationOptions = getPostApiPasswordChangeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    