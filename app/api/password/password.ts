/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Calendar Service API
 * API for managing chat, orders and payments.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  ChangePasswordRequest,
  ChangePasswordResponse,
  PasswordReset,
  PasswordResetRequest,
  PostApiPasswordChange400,
  PostApiPasswordChange404,
  PostApiPasswordChange500
} from '../../types/api';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Request a password reset
 */
export const postApiPasswordForgot = (
    passwordResetRequest: BodyType<PasswordResetRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/password/forgot`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: passwordResetRequest, signal
    },
      options);
    }
  


export const getPostApiPasswordForgotMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordForgot>>, TError,{data: BodyType<PasswordResetRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordForgot>>, TError,{data: BodyType<PasswordResetRequest>}, TContext> => {

const mutationKey = ['postApiPasswordForgot'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPasswordForgot>>, {data: BodyType<PasswordResetRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postApiPasswordForgot(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPasswordForgotMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPasswordForgot>>>
    export type PostApiPasswordForgotMutationBody = BodyType<PasswordResetRequest>
    export type PostApiPasswordForgotMutationError = ErrorType<void>

    /**
 * @summary Request a password reset
 */
export const usePostApiPasswordForgot = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordForgot>>, TError,{data: BodyType<PasswordResetRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPasswordForgot>>,
        TError,
        {data: BodyType<PasswordResetRequest>},
        TContext
      > => {

      const mutationOptions = getPostApiPasswordForgotMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Reset the user's password
 */
export const postApiPasswordReset = (
    passwordReset: BodyType<PasswordReset>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/password/reset`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: passwordReset, signal
    },
      options);
    }
  


export const getPostApiPasswordResetMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordReset>>, TError,{data: BodyType<PasswordReset>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordReset>>, TError,{data: BodyType<PasswordReset>}, TContext> => {

const mutationKey = ['postApiPasswordReset'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPasswordReset>>, {data: BodyType<PasswordReset>}> = (props) => {
          const {data} = props ?? {};

          return  postApiPasswordReset(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPasswordResetMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPasswordReset>>>
    export type PostApiPasswordResetMutationBody = BodyType<PasswordReset>
    export type PostApiPasswordResetMutationError = ErrorType<void>

    /**
 * @summary Reset the user's password
 */
export const usePostApiPasswordReset = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordReset>>, TError,{data: BodyType<PasswordReset>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPasswordReset>>,
        TError,
        {data: BodyType<PasswordReset>},
        TContext
      > => {

      const mutationOptions = getPostApiPasswordResetMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Change a user's password.
 */
export const postApiPasswordChange = (
    changePasswordRequest: BodyType<ChangePasswordRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ChangePasswordResponse>(
      {url: `/api/password/change`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: changePasswordRequest, signal
    },
      options);
    }
  


export const getPostApiPasswordChangeMutationOptions = <TError = ErrorType<PostApiPasswordChange400 | PostApiPasswordChange404 | PostApiPasswordChange500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordChange>>, TError,{data: BodyType<ChangePasswordRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordChange>>, TError,{data: BodyType<ChangePasswordRequest>}, TContext> => {

const mutationKey = ['postApiPasswordChange'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPasswordChange>>, {data: BodyType<ChangePasswordRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postApiPasswordChange(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPasswordChangeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPasswordChange>>>
    export type PostApiPasswordChangeMutationBody = BodyType<ChangePasswordRequest>
    export type PostApiPasswordChangeMutationError = ErrorType<PostApiPasswordChange400 | PostApiPasswordChange404 | PostApiPasswordChange500>

    /**
 * @summary Change a user's password.
 */
export const usePostApiPasswordChange = <TError = ErrorType<PostApiPasswordChange400 | PostApiPasswordChange404 | PostApiPasswordChange500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPasswordChange>>, TError,{data: BodyType<ChangePasswordRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPasswordChange>>,
        TError,
        {data: BodyType<ChangePasswordRequest>},
        TContext
      > => {

      const mutationOptions = getPostApiPasswordChangeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    