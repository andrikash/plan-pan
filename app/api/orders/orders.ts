/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Calendar Service API
 * API for managing chat, orders and payments.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreateOrderRequest,
  GetApiOrders200,
  GetApiOrders500,
  GetApiOrdersParams,
  Order
} from '../../types/api';





/**
 * @summary Create a new order.
 */
export const postApiOrders = (
    createOrderRequest: CreateOrderRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Order>> => {
    
    const formData = new FormData();
formData.append(`workType`, createOrderRequest.workType)
formData.append(`subjectArea`, createOrderRequest.subjectArea)
formData.append(`email`, createOrderRequest.email)
formData.append(`deadline`, createOrderRequest.deadline)
formData.append(`pages`, createOrderRequest.pages.toString())
if(createOrderRequest.phoneNumber !== undefined) {
 formData.append(`phoneNumber`, createOrderRequest.phoneNumber)
 }
if(createOrderRequest.firstName !== undefined) {
 formData.append(`firstName`, createOrderRequest.firstName)
 }
if(createOrderRequest.lastName !== undefined) {
 formData.append(`lastName`, createOrderRequest.lastName)
 }
if(createOrderRequest.files !== undefined) {
 createOrderRequest.files.forEach(value => formData.append(`files`, value));
 }

    return axios.post(
      `https://dev-api.planandpan.com/api/orders`,
      formData,options
    );
  }



export const getPostApiOrdersMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrders>>, TError,{data: CreateOrderRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrders>>, TError,{data: CreateOrderRequest}, TContext> => {

const mutationKey = ['postApiOrders'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrders>>, {data: CreateOrderRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrders(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiOrdersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrders>>>
    export type PostApiOrdersMutationBody = CreateOrderRequest
    export type PostApiOrdersMutationError = AxiosError<void>

    /**
 * @summary Create a new order.
 */
export const usePostApiOrders = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrders>>, TError,{data: CreateOrderRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiOrders>>,
        TError,
        {data: CreateOrderRequest},
        TContext
      > => {

      const mutationOptions = getPostApiOrdersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get all orders with optional filters, sorting, and pagination.
 */
export const getApiOrders = (
    params?: GetApiOrdersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetApiOrders200>> => {
    
    
    return axios.get(
      `https://dev-api.planandpan.com/api/orders`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiOrdersQueryKey = (params?: GetApiOrdersParams,) => {
    return [`https://dev-api.planandpan.com/api/orders`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrders>>, TError = AxiosError<GetApiOrders500>>(params?: GetApiOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrdersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrders>>> = ({ signal }) => getApiOrders(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrders>>>
export type GetApiOrdersQueryError = AxiosError<GetApiOrders500>


export function useGetApiOrders<TData = Awaited<ReturnType<typeof getApiOrders>>, TError = AxiosError<GetApiOrders500>>(
 params: undefined |  GetApiOrdersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrders>>,
          TError,
          Awaited<ReturnType<typeof getApiOrders>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrders<TData = Awaited<ReturnType<typeof getApiOrders>>, TError = AxiosError<GetApiOrders500>>(
 params?: GetApiOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrders>>,
          TError,
          Awaited<ReturnType<typeof getApiOrders>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrders<TData = Awaited<ReturnType<typeof getApiOrders>>, TError = AxiosError<GetApiOrders500>>(
 params?: GetApiOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all orders with optional filters, sorting, and pagination.
 */

export function useGetApiOrders<TData = Awaited<ReturnType<typeof getApiOrders>>, TError = AxiosError<GetApiOrders500>>(
 params?: GetApiOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOrdersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get a specific order by ID.
 */
export const getApiOrdersId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Order>> => {
    
    
    return axios.get(
      `https://dev-api.planandpan.com/api/orders/${id}`,options
    );
  }


export const getGetApiOrdersIdQueryKey = (id: string,) => {
    return [`https://dev-api.planandpan.com/api/orders/${id}`] as const;
    }

    
export const getGetApiOrdersIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrdersId>>, TError = AxiosError<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrdersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrdersId>>> = ({ signal }) => getApiOrdersId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOrdersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrdersId>>>
export type GetApiOrdersIdQueryError = AxiosError<void>


export function useGetApiOrdersId<TData = Awaited<ReturnType<typeof getApiOrdersId>>, TError = AxiosError<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrdersId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrdersId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrdersId<TData = Awaited<ReturnType<typeof getApiOrdersId>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrdersId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrdersId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrdersId<TData = Awaited<ReturnType<typeof getApiOrdersId>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a specific order by ID.
 */

export function useGetApiOrdersId<TData = Awaited<ReturnType<typeof getApiOrdersId>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOrdersIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update an existing order (Admin only).
 */
export const putApiOrdersId = (
    id: string,
    createOrderRequest: CreateOrderRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Order>> => {
    
    
    return axios.put(
      `https://dev-api.planandpan.com/api/orders/${id}`,
      createOrderRequest,options
    );
  }



export const getPutApiOrdersIdMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiOrdersId>>, TError,{id: string;data: CreateOrderRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiOrdersId>>, TError,{id: string;data: CreateOrderRequest}, TContext> => {

const mutationKey = ['putApiOrdersId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiOrdersId>>, {id: string;data: CreateOrderRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiOrdersId(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiOrdersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOrdersId>>>
    export type PutApiOrdersIdMutationBody = CreateOrderRequest
    export type PutApiOrdersIdMutationError = AxiosError<void>

    /**
 * @summary Update an existing order (Admin only).
 */
export const usePutApiOrdersId = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiOrdersId>>, TError,{id: string;data: CreateOrderRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiOrdersId>>,
        TError,
        {id: string;data: CreateOrderRequest},
        TContext
      > => {

      const mutationOptions = getPutApiOrdersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    