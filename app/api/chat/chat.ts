/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Calendar Service API
 * API for managing chat, orders and payments.
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetChatChatId200,
  GetChatChatId400,
  GetChatChatId500
} from '../../types/api';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Fetches all file attachments from messages in a specified chat, sorted by creation date in descending order.
 * @summary Retrieve all attachments in a chat.
 */
export const getChatChatId = (
    chatId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetChatChatId200>(
      {url: `/chat/${chatId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetChatChatIdQueryKey = (chatId: string,) => {
    return [`/chat/${chatId}`] as const;
    }

    
export const getGetChatChatIdQueryOptions = <TData = Awaited<ReturnType<typeof getChatChatId>>, TError = ErrorType<GetChatChatId400 | GetChatChatId500>>(chatId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatChatId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetChatChatIdQueryKey(chatId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChatChatId>>> = ({ signal }) => getChatChatId(chatId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(chatId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChatChatId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetChatChatIdQueryResult = NonNullable<Awaited<ReturnType<typeof getChatChatId>>>
export type GetChatChatIdQueryError = ErrorType<GetChatChatId400 | GetChatChatId500>


export function useGetChatChatId<TData = Awaited<ReturnType<typeof getChatChatId>>, TError = ErrorType<GetChatChatId400 | GetChatChatId500>>(
 chatId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatChatId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChatChatId>>,
          TError,
          Awaited<ReturnType<typeof getChatChatId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetChatChatId<TData = Awaited<ReturnType<typeof getChatChatId>>, TError = ErrorType<GetChatChatId400 | GetChatChatId500>>(
 chatId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatChatId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChatChatId>>,
          TError,
          Awaited<ReturnType<typeof getChatChatId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetChatChatId<TData = Awaited<ReturnType<typeof getChatChatId>>, TError = ErrorType<GetChatChatId400 | GetChatChatId500>>(
 chatId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatChatId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retrieve all attachments in a chat.
 */

export function useGetChatChatId<TData = Awaited<ReturnType<typeof getChatChatId>>, TError = ErrorType<GetChatChatId400 | GetChatChatId500>>(
 chatId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatChatId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChatChatIdQueryOptions(chatId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



